var searchIndex = {};
searchIndex["bytevec"] = {"doc":"bytevec: A Rust serialization library that uses byte vectors\n============================================================","items":[[0,"errors","bytevec","",null,null],[4,"BVWantedSize","bytevec::errors","",null,null],[13,"MoreThan","","",0,null],[13,"EqualTo","","",0,null],[4,"ByteVecError","","",null,null],[13,"StringDecodeUtf8Error","","",1,null],[13,"BadSizeDecodeError","","",1,null],[12,"wanted","bytevec::errors::ByteVecError","",1,null],[12,"actual","","",1,null],[13,"OverflowError","bytevec::errors","",1,null],[11,"clone","","",0,{"inputs":[{"name":"bvwantedsize"}],"output":{"name":"bvwantedsize"}}],[11,"fmt","","",0,{"inputs":[{"name":"bvwantedsize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"bytevecerror"}],"output":{"name":"bytevecerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"bytevecerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"bytevecerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"bytevecerror"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"bytevecerror"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"utf8error"}],"output":{"name":"bytevecerror"}}],[11,"get_size","collections::string","",2,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"encode","","",2,{"inputs":[{"name":"string"}],"output":{"name":"bvencoderesult"}}],[11,"decode","","",2,null],[11,"get_size","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"encode","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"bvencoderesult"}}],[11,"decode","","",3,null],[11,"get_size","std::collections::hash::set","",4,{"inputs":[{"name":"hashset"}],"output":{"name":"option"}}],[11,"encode","","",4,{"inputs":[{"name":"hashset"}],"output":{"name":"bvencoderesult"}}],[11,"decode","","",4,null],[11,"get_size","std::collections::hash::map","",5,{"inputs":[{"name":"hashmap"}],"output":{"name":"option"}}],[11,"encode","","",5,{"inputs":[{"name":"hashmap"}],"output":{"name":"bvencoderesult"}}],[11,"decode","","",5,null],[6,"BVEncodeResult","bytevec","",null,null],[6,"BVDecodeResult","","",null,null],[8,"ByteEncodable","","",null,null],[10,"get_size","","",6,{"inputs":[{"name":"byteencodable"}],"output":{"name":"option"}}],[10,"encode","","",6,{"inputs":[{"name":"byteencodable"}],"output":{"name":"bvencoderesult"}}],[8,"ByteDecodable","","",null,null],[10,"decode","","",7,null],[14,"bytevec_impls!","","###The `bytevec_impls` macro\nThis macro allows the user to declare an arbitrary number of structures that\nautomatically implement both the `ByteEncodable` and `ByteDecodable` traits,\nas long as all of the fields also implement both traits.",null,null]],"paths":[[4,"BVWantedSize"],[4,"ByteVecError"],[3,"String"],[3,"Vec"],[3,"HashSet"],[3,"HashMap"],[8,"ByteEncodable"],[8,"ByteDecodable"]]};
initSearch(searchIndex);
