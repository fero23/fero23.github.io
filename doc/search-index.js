var searchIndex = {};
searchIndex["bytevec"] = {"doc":"bytevec: A Rust serialization library that uses byte vectors\n============================================================","items":[[0,"errors","bytevec","",null,null],[4,"BVExpectedSize","bytevec::errors","",null,null],[13,"LessOrEqualThan","","",0,null],[13,"MoreThan","","",0,null],[13,"EqualTo","","",0,null],[4,"ByteVecError","","",null,null],[13,"StringDecodeUtf8Error","","",1,null],[13,"BadSizeDecodeError","","",1,null],[12,"expected","bytevec::errors::ByteVecError","",1,null],[12,"actual","","",1,null],[13,"OverflowError","bytevec::errors","",1,null],[11,"clone","","",0,{"inputs":[{"name":"bvexpectedsize"}],"output":{"name":"bvexpectedsize"}}],[11,"fmt","","",0,{"inputs":[{"name":"bvexpectedsize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"bytevecerror"}],"output":{"name":"bytevecerror"}}],[11,"fmt","","",1,{"inputs":[{"name":"bytevecerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"bytevecerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"bytevecerror"}],"output":{"name":"str"}}],[11,"cause","","",1,{"inputs":[{"name":"bytevecerror"}],"output":{"name":"option"}}],[11,"from","","",1,{"inputs":[{"name":"utf8error"}],"output":{"name":"bytevecerror"}}],[11,"get_size","collections::string","",2,{"inputs":[{"name":"string"}],"output":{"name":"option"}}],[11,"encode","","",2,{"inputs":[{"name":"string"}],"output":{"name":"bvencoderesult"}}],[11,"decode","","",2,null],[11,"get_size","collections::vec","",3,{"inputs":[{"name":"vec"}],"output":{"name":"option"}}],[11,"encode","","",3,{"inputs":[{"name":"vec"}],"output":{"name":"bvencoderesult"}}],[11,"decode","","",3,null],[11,"get_size","std::collections::hash::set","",4,{"inputs":[{"name":"hashset"}],"output":{"name":"option"}}],[11,"encode","","",4,{"inputs":[{"name":"hashset"}],"output":{"name":"bvencoderesult"}}],[11,"decode","","",4,null],[11,"get_size","std::collections::hash::map","",5,{"inputs":[{"name":"hashmap"}],"output":{"name":"option"}}],[11,"encode","","",5,{"inputs":[{"name":"hashmap"}],"output":{"name":"bvencoderesult"}}],[11,"decode","","",5,null],[6,"BVEncodeResult","bytevec","",null,null],[6,"BVDecodeResult","","",null,null],[8,"ByteEncodable","","Provides serialization functionality for the implementing types.",null,null],[10,"get_size","","Returns the total length of the byte buffer\nthan can be obtained through the `encode` method  ",6,{"inputs":[{"name":"byteencodable"}],"output":{"name":"option"}}],[10,"encode","","Returs a byte representation of the original data object",6,{"inputs":[{"name":"byteencodable"}],"output":{"name":"bvencoderesult"}}],[8,"ByteDecodable","","Provides deserialization functionality for the implementing types.",null,null],[10,"decode","","Returns an instance of `Self` obtained from the deserialization of the provided byte buffer.",7,null],[11,"decode_max","","Returns the result of `decode` if `bytes.len()` is less or equal than `limit`",7,null],[8,"BVSize","","Represents the generic integral type of the structure size indicators",null,null],[10,"from_usize","","Returns a `Self` value casted from an `usize` value",8,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"as_usize","","Returns an `usize` value casted from a `Self` value",8,{"inputs":[{"name":"bvsize"}],"output":{"name":"usize"}}],[10,"max_value","","Returns the max value for `Self`",8,{"inputs":[],"output":{"name":"self"}}],[10,"checked_add","","Calls the `checked_add` method of `self` passing `rhs`",8,{"inputs":[{"name":"bvsize"},{"name":"self"}],"output":{"name":"option"}}],[10,"get_size_of","","Returns the returned value of [`std::mem::size_of`][1] for `Self`\n[1]: http://doc.rust-lang.org/stable/std/mem/fn.size_of.html",8,{"inputs":[],"output":{"name":"self"}}],[14,"bytevec_impls!","","Implements the byte serialization traits for the given structures.",null,null],[14,"bytevec_decl!","","Declares the given structures and implements the byte serialization traits.",null,null],[11,"decode_max","","Returns the result of `decode` if `bytes.len()` is less or equal than `limit`",7,null]],"paths":[[4,"BVExpectedSize"],[4,"ByteVecError"],[3,"String"],[3,"Vec"],[3,"HashSet"],[3,"HashMap"],[8,"ByteEncodable"],[8,"ByteDecodable"],[8,"BVSize"]]};
initSearch(searchIndex);
